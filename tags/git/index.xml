<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>git on zamonia500's tech blog</title><link>https://blog.zamonia500.com/tags/git/</link><description>Recent content in git on zamonia500's tech blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 28 Aug 2022 20:33:27 +0900</lastBuildDate><atom:link href="https://blog.zamonia500.com/tags/git/index.xml" rel="self" type="application/rss+xml"/><item><title>Three Git Flows</title><link>https://blog.zamonia500.com/posts/etc/three-git-flows/</link><pubDate>Sun, 28 Aug 2022 20:33:27 +0900</pubDate><guid>https://blog.zamonia500.com/posts/etc/three-git-flows/</guid><description>협업, 출시 형상 관리는 어렵다. 개발은 개발대로 해야 하고, 출시 준비는 준비대로 해야 한다.
QA는 해야 겠는데 계속 추가 기능이 반영되는 브랜치에서 QA를 진행하게 된다면 지속적으로 병합되는 다른 기능들 때문에 이미 수행된 테스트 케이스들이 여전히 정상 동작하는지 알 수 없다.
이런 어려움을 잘 해쳐 나가기 위해서 git flow, github flow, gitlab flow 따위의 git branch 사용 전략이 많이 제시되었다. 이 전략들에 대해서 알아보자.
Git flow 기본 아이디어 : 외부 코드 변화에 영향을 받고싶지 않으면 브랜치를 따서 작업한다.</description></item></channel></rss>