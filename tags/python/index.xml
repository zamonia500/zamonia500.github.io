<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>python on zamonia500's tech blog</title><link>https://blog.zamonia500.com/tags/python/</link><description>Recent content in python on zamonia500's tech blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 13 Mar 2022 14:16:29 +0900</lastBuildDate><atom:link href="https://blog.zamonia500.com/tags/python/index.xml" rel="self" type="application/rss+xml"/><item><title>python aiohttp 사용법</title><link>https://blog.zamonia500.com/posts/python-aiohttp/</link><pubDate>Sun, 13 Mar 2022 14:16:29 +0900</pubDate><guid>https://blog.zamonia500.com/posts/python-aiohttp/</guid><description>aiohttp란? aiohttp는 &amp;ldquo;Async HTTP client/server for asyncio and Python&amp;quot;이다.
블로킹 콜(blocking-call)이 일어나는 request와는 다르게, aiohttp를 사용하면 싱글 스레드 환경에서 코루틴을 활용한 병렬 처리를 할 수 있다.
aiohttp는 client / server를 위한 기능이 모두 있지만, 나는 client 기능만을 사용하였다.
aiohttp 사용해서 KFP(Kubeflow Pipeline) API 호출하기 KFP SDK가 있긴 하다 kfp(Kubeflow Pipeline) SDK는 자동 생성되는 녀석이라 사용성이 너무 좋지 않았다. 사용하고자 하는 kfp의 upload_pipeline, upload_pipeline_version 함수를 사용하고자 했는데, 이 함수들의 시그니쳐는 다음과 같다.</description></item></channel></rss>